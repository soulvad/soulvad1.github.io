{"ast":null,"code":"import { collection, getDocs, doc, getDoc, addDoc, updateDoc, deleteDoc, query, where } from 'firebase/firestore';\nimport { db } from '../firebase/config';\nexport const tourService = {\n  // Отримати всі тури\n  async getAllTours() {\n    const toursCollection = collection(db, 'tours');\n    const toursSnapshot = await getDocs(toursCollection);\n    return toursSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  },\n  // Отримати тур за ID\n  async getTourById(id) {\n    const tourDoc = await getDoc(doc(db, 'tours', id));\n    if (tourDoc.exists()) {\n      return {\n        id: tourDoc.id,\n        ...tourDoc.data()\n      };\n    }\n    return null;\n  },\n  // Додати новий тур\n  async addTour(tour) {\n    const toursCollection = collection(db, 'tours');\n    const docRef = await addDoc(toursCollection, tour);\n    return docRef.id;\n  },\n  // Оновити тур\n  async updateTour(id, tour) {\n    const tourRef = doc(db, 'tours', id);\n    await updateDoc(tourRef, tour);\n  },\n  // Видалити тур\n  async deleteTour(id) {\n    const tourRef = doc(db, 'tours', id);\n    await deleteDoc(tourRef);\n  },\n  // Додати відгук до туру\n  async addReview(tourId, review) {\n    const tourRef = doc(db, 'tours', tourId);\n    const tourDoc = await getDoc(tourRef);\n    if (tourDoc.exists()) {\n      const tour = tourDoc.data();\n      const reviews = tour.reviews || [];\n      reviews.push(review);\n\n      // Оновлюємо середній рейтинг\n      const avgRating = reviews.reduce((acc, curr) => acc + curr.rating, 0) / reviews.length;\n      await updateDoc(tourRef, {\n        reviews,\n        rating: avgRating\n      });\n    }\n  },\n  // Отримати тури за місцем розташування\n  async getToursByLocation(location) {\n    const toursCollection = collection(db, 'tours');\n    const q = query(toursCollection, where('location', '==', location));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    }));\n  },\n  // Додати бронювання\n  async addBooking(tourId, userId) {\n    const existingBookingsQuery = query(collection(db, 'bookings'), where('tourId', '==', tourId), where('userId', '==', userId));\n    const existingBookings = await getDocs(existingBookingsQuery);\n    if (!existingBookings.empty) {\n      throw new Error('Ви вже забронювали цей тур');\n    }\n    const bookingsCollection = collection(db, 'bookings');\n    const booking = {\n      tourId,\n      userId,\n      date: new Date().toISOString(),\n      status: 'pending'\n    };\n    try {\n      const docRef = await addDoc(bookingsCollection, booking);\n      return docRef.id;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Отримати бронювання користувача\n  async getUserBookings(userId) {\n    try {\n      const bookingsQuery = query(collection(db, 'bookings'), where('userId', '==', userId));\n      const bookingsSnapshot = await getDocs(bookingsQuery);\n      const bookings = bookingsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        status: doc.data().status\n      }));\n      return bookings;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Скасувати бронювання\n  async cancelBooking(bookingId) {\n    try {\n      const bookingRef = doc(db, 'bookings', bookingId);\n      await deleteDoc(bookingRef);\n    } catch (error) {\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["collection","getDocs","doc","getDoc","addDoc","updateDoc","deleteDoc","query","where","db","tourService","getAllTours","toursCollection","toursSnapshot","docs","map","id","data","getTourById","tourDoc","exists","addTour","tour","docRef","updateTour","tourRef","deleteTour","addReview","tourId","review","reviews","push","avgRating","reduce","acc","curr","rating","length","getToursByLocation","location","q","querySnapshot","addBooking","userId","existingBookingsQuery","existingBookings","empty","Error","bookingsCollection","booking","date","Date","toISOString","status","error","getUserBookings","bookingsQuery","bookingsSnapshot","bookings","cancelBooking","bookingId","bookingRef"],"sources":["D:/NULP/SEM4/labs/Веб/soulvad1.github.io/src/services/tourService.ts"],"sourcesContent":["import { collection, getDocs, doc, getDoc, addDoc, updateDoc, deleteDoc, query, where } from 'firebase/firestore';\nimport { db } from '../firebase/config';\n\nexport interface Tour {\n  id: string;\n  title: string;\n  description: string;\n  price: number;\n  duration: string;\n  location: string;\n  image: string;\n  coordinates: {\n    lat: number;\n    lng: number;\n  };\n  rating?: number;\n  reviews?: Review[];\n}\n\nexport interface Review {\n  id?: string;\n  userId: string;\n  userName: string;\n  rating: number;\n  comment: string;\n  date: Date;\n}\n\nexport interface Booking {\n  id: string;\n  tourId: string;\n  userId: string;\n  date: string;\n  status: string;\n}\n\nexport const tourService = {\n  // Отримати всі тури\n  async getAllTours(): Promise<Tour[]> {\n    const toursCollection = collection(db, 'tours');\n    const toursSnapshot = await getDocs(toursCollection);\n    return toursSnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    } as Tour));\n  },\n\n  // Отримати тур за ID\n  async getTourById(id: string): Promise<Tour | null> {\n    const tourDoc = await getDoc(doc(db, 'tours', id));\n    if (tourDoc.exists()) {\n      return {\n        id: tourDoc.id,\n        ...tourDoc.data()\n      } as Tour;\n    }\n    return null;\n  },\n\n  // Додати новий тур\n  async addTour(tour: Omit<Tour, 'id'>): Promise<string> {\n    const toursCollection = collection(db, 'tours');\n    const docRef = await addDoc(toursCollection, tour);\n    return docRef.id;\n  },\n\n  // Оновити тур\n  async updateTour(id: string, tour: Partial<Tour>): Promise<void> {\n    const tourRef = doc(db, 'tours', id);\n    await updateDoc(tourRef, tour);\n  },\n\n  // Видалити тур\n  async deleteTour(id: string): Promise<void> {\n    const tourRef = doc(db, 'tours', id);\n    await deleteDoc(tourRef);\n  },\n\n  // Додати відгук до туру\n  async addReview(tourId: string, review: Omit<Review, 'id'>): Promise<void> {\n    const tourRef = doc(db, 'tours', tourId);\n    const tourDoc = await getDoc(tourRef);\n    \n    if (tourDoc.exists()) {\n      const tour = tourDoc.data() as Tour;\n      const reviews = tour.reviews || [];\n      reviews.push(review);\n      \n      // Оновлюємо середній рейтинг\n      const avgRating = reviews.reduce((acc, curr) => acc + curr.rating, 0) / reviews.length;\n      \n      await updateDoc(tourRef, {\n        reviews,\n        rating: avgRating\n      });\n    }\n  },\n\n  // Отримати тури за місцем розташування\n  async getToursByLocation(location: string): Promise<Tour[]> {\n    const toursCollection = collection(db, 'tours');\n    const q = query(toursCollection, where('location', '==', location));\n    const querySnapshot = await getDocs(q);\n    \n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    } as Tour));\n  },\n\n  // Додати бронювання\n  async addBooking(tourId: string, userId: string): Promise<string> {\n    const existingBookingsQuery = query(\n      collection(db, 'bookings'),\n      where('tourId', '==', tourId),\n      where('userId', '==', userId)\n    );\n    const existingBookings = await getDocs(existingBookingsQuery);\n    \n    if (!existingBookings.empty) {\n      throw new Error('Ви вже забронювали цей тур');\n    }\n\n    const bookingsCollection = collection(db, 'bookings');\n    const booking = {\n      tourId,\n      userId,\n      date: new Date().toISOString(),\n      status: 'pending'\n    };\n    \n    try {\n      const docRef = await addDoc(bookingsCollection, booking);\n      return docRef.id;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Отримати бронювання користувача\n  async getUserBookings(userId: string): Promise<Booking[]> {\n    try {\n      const bookingsQuery = query(\n        collection(db, 'bookings'),\n        where('userId', '==', userId)\n      );\n      const bookingsSnapshot = await getDocs(bookingsQuery);\n      \n      const bookings = bookingsSnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n        status: doc.data().status as 'pending' | 'confirmed' | 'cancelled'\n      } as Booking));\n      \n      return bookings;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Скасувати бронювання\n  async cancelBooking(bookingId: string): Promise<void> {\n    try {\n      const bookingRef = doc(db, 'bookings', bookingId);\n      await deleteDoc(bookingRef);\n    } catch (error) {\n      throw error;\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}